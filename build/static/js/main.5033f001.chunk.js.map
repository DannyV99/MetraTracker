{"version":3,"sources":["Weather.js","App.js","serviceWorker.js","index.js"],"names":["Weather","state","temperature","clouds","wind","picture","getWeather","fetch","then","response","json","_this","setState","data","current","catch","err","console","error","skytext","winddisplay","currentTime","a","b","newDate","Date","hours","getHours","minutes","getMinutes","this","PIC_URL","map","x","url","SUNNY","react_default","createElement","src","PART_SUNNY","CLOUDY","document","body","style","backgroundColor","color","NIGHT","href","width","height","frameborder","seamless","className","Component","App","databaseTimes","edisonAPI","_","getInfo","otcAPI","renderStop","_ref","TrainStop","key","PRIMARY_KEY","renderTime","_ref2","DepartureTime","renderToGo","_ref3","MinutesToGo","_this2","newBucket","filter","e","Object","assign","timeConvert","parseInt","n","rhours","Math","floor","rminutes","round","STATION","TIME","MINUTESTOGO","EDISONPARK","type","onClick","OGLEVIE","src_Weather","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.5033f001.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\n\nclass Weather extends Component {\n\n    state = {\n        temperature: [],\n        clouds: [],\n        wind: [],\n        picture: []\n    }\n\n    componentDidMount() {\n        this.getWeather();\n    }\n\n    getWeather = () => {\n        fetch('http://localhost:4000/Weather')\n            .then(response => response.json())\n            .then(response => this.setState(\n                { temperature: response.data[0].current.temperature }))\n            .catch(err => console.error(err))\n\n        fetch('http://localhost:4000/Weather')\n            .then(response => response.json())\n            .then(response => this.setState(\n                { clouds: response.data[0].current.skytext }))\n            .catch(err => console.error(err))\n\n        fetch('http://localhost:4000/Weather')\n            .then(response => response.json())\n            .then(response => this.setState(\n                { wind: response.data[0].current.winddisplay }))\n            .catch(err => console.error(err))\n\n        fetch('http://localhost:4000/WeatherPictures')\n            .then(response => response.json())\n            .then(response => this.setState(\n                { picture: response.data }))\n            .catch(err => console.error(err))\n    }\n\n\n    currentTime = (a, b) => {\n        var newDate = new Date()\n        var hours = newDate.getHours()\n        var minutes = newDate.getMinutes()\n        return minutes < 10 ? hours + \"0\" + minutes : hours + \"\" + minutes;\n    }\n\n    render() {\n\n        const { temperature } = this.state;\n        const { clouds } = this.state;\n        const { wind } = this.state;\n        const { picture } = this.state;\n\n\n        const PIC_URL = { picture }.picture.map(x => x.url)\n\n\n        if (this.currentTime() < 1900 && this.currentTime() > 700) {\n            if ({ clouds }.clouds === 'Sunny' || { clouds }.clouds === 'Mostly Clear') {\n                var SUNNY = <img src={PIC_URL[1]}></img>\n            } else if ({ clouds }.clouds === 'Partly Sunny' || { clouds }.clouds === 'Mostly Sunny') {\n                var PART_SUNNY = <img src={PIC_URL[0]}></img>\n            } else if ({ clouds }.clouds === 'Cloudy' || { clouds }.clouds === 'Mostly Cloudy') {\n                var CLOUDY = <img src={PIC_URL[3]}></img>\n            }\n        } else {\n            document.body.style.backgroundColor = \"#2d3d65\";\n            document.body.style.color = \"white\";\n            var NIGHT = <img src={PIC_URL[2]}></img>\n        }\n\n        var NEWTIME = <div style=\"text-align:center;padding:1em 0;\"> <h3><a style=\"text-decoration:none;\" href=\"https://www.zeitverschiebung.net/en/city/4887398\"><span style=\"color:gray;\">Current local time in</span><br />Chicago, United States</a></h3> <iframe src=\"https://www.zeitverschiebung.net/clock-widget-iframe-v2?language=en&size=medium&timezone=America%2FChicago\" width=\"100%\" height=\"115\" frameborder=\"0\" seamless></iframe> </div>\n\n\n\n        \n\n\n        return (\n\n            <div className='weatherDiv'>\n                <div className=\"MMM\">\n                    <h1>Temp: {temperature}</h1>\n                    <h1>Conditions: {clouds}</h1>\n                    <h1>Wind: {wind}</h1>\n\n                    {SUNNY}\n                    {NIGHT}\n                    {PART_SUNNY}\n                    {CLOUDY}\n\n                </div>\n\n\n                    <h1 className='title1'>METRA<br></br>TRACKER</h1>\n\n            </div>\n\n        )\n    }\n}\n\n\nexport default Weather;","import React, { Component } from 'react';\nimport './App.css';\nimport Weather from './Weather'\n\n\nclass App extends Component {\n\n  state = {\n    databaseTimes: [],\n  }\n\n  componentDidMount() {\n  }\n\n  edisonAPI = _ => {\n    this.getInfo('WeekdaysToTheCity')\n  }\n\n  otcAPI = _ => {\n    this.getInfo('WeekdaysFromTheCity')\n  }\n\n  getInfo = (a) => {\n    fetch('http://localhost:4000/' + a)\n      .then(response => response.json())\n      .then(response => this.setState(\n        { databaseTimes: response.data }))\n      .catch(err => console.error(err))\n  }\n\n\n  currentTime = (a, b) => {\n    var newDate = new Date()\n    var hours = newDate.getHours()\n    var minutes = newDate.getMinutes()\n\n    return minutes < 10 ? hours + \"0\" + minutes : hours + \"\" + minutes;\n  }\n\n  renderStop = ({ TrainStop }) => <li key={TrainStop.PRIMARY_KEY}>{TrainStop}</li>\n  renderTime = ({ DepartureTime }) => <li key={DepartureTime.PRIMARY_KEY}>{DepartureTime}</li>\n  renderToGo = ({ MinutesToGo }) => <div key={MinutesToGo.PRIMARY_KEY}>{MinutesToGo}</div>\n\n\n  render() {\n\n    // list of trains {TrainStop: String, DepartureTime: Int, id: Int}\n    // filter out old trains\n    // convert to int\n\n\n    const { databaseTimes } = this.state;\n\n\n\n    // bucket is an array of train objects\n    var bucket = databaseTimes.filter(e => e.DepartureTime > this.currentTime());\n    var newBucket = bucket.map(x => Object.assign({ MinutesToGo: timeConvert((parseInt(x.DepartureTime)) - (parseInt(this.currentTime()))) }, x));\n\n\n\n    function timeConvert(n) {\n      var num = n;\n      var hours = (num / 60);\n      var rhours = Math.floor(hours);\n      var minutes = (hours - rhours) * 60;\n      var rminutes = Math.round(minutes);\n      if (rhours > 0) {\n        return \"Plenty of Time\"\n      } else { return rhours + \" hr(s) and \" + rminutes + \" min(s)\" }\n    }\n\n    const STATION = <li className='div1'>{newBucket.map(this.renderStop)}</li>\n    const TIME = <li className='div2'>{newBucket.map(this.renderTime)}</li>\n    const MINUTESTOGO = newBucket.map(this.renderToGo)[0]\n    const EDISONPARK = <button type=\"submit\" onClick={this.edisonAPI}>EDISON PARK</button>\n    const OGLEVIE = <button type=\"submit\" onClick={this.otcAPI}>OGLEVIE TRANSPORTATION CENTER</button>\n\n\n\n\n\n\n\n\n    return (\n\n      <div className=\"bigBox\">\n        <div className=\"App\">\n\n          <Weather />\n          <iframe className = \"clock\" src=\"http://free.timeanddate.com/clock/i6jjvvaq/n64/szw160/szh160/hoc000/hbw4/cf100/hgr0/fav0/fiv0/mqc000/mqs3/mql25/mqw6/mqd96/mhc000/mhs3/mhl20/mhw6/mhd96/mmc000/mms3/mml10/mmw2/mmd96/hhw16/hmw16/hmr4/hsc000/hss3/hsl90\" frameborder=\"0\" width=\"160\" height=\"160\"></iframe>\n\n          <h1>{EDISONPARK}<br></br>\n            {OGLEVIE}</h1>\n\n\n\n          <div className='div3'>\n            {'You have:'}<br></br>\n            {MINUTESTOGO}\n            {'Until Departure'}\n          </div>\n\n          <div className='table'>\n            <table>\n              <tr>\n                <th>Train Station</th>\n                <th>Departure Times</th>\n              </tr>\n              <tr>\n                <td>{STATION}</td>\n                <td>{TIME}</td>\n              </tr>\n            </table>\n          </div>\n        </div>\n      </div>\n\n    )\n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}